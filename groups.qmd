```{r}
librarian::shelf(
  here
)
source(here('groups', 'prev.r'))
job_binary <- read_csv(here::here("data", "last_result.csv"))
```


## Range-based bounds vs ATE

```{r,  cache=T}
ps = seq(0.01, 1, 0.01)
bs = seq(0,.25,.05)
CVaR.bbound.mATE = foreach(p=ps, .combine=rbind) %do% { foreach(b=bs, .combine=rbind) %do% {
  q = wtdquantile(c(job_binary$tau+b,job_binary$tau-b),c(job_binary$sw,job_binary$sw),p) 
  job_binary %>% mutate(IF = -(mu1-mu0+(2*A-1)*ipw*(Y-A*mu1-(1-A)*mu0)) + q + (mu1-mu0+(2*A-1)*ipw*(Y-A*mu1-(1-A)*mu0)-q-b)*(tau-b<=q)/2/p + (mu1-mu0+(2*A-1)*ipw*(Y-A*mu1-(1-A)*mu0)-q+b)*(tau+b<=q)/2/p) %>% summarise(p=p, b=b, CVaR = mean(sw*IF,na.rm=T), CVaR.se = sd(sw*IF,na.rm=T)/sqrt(n()))
}} 
CVaR.bbound.mATE %>% mutate(b=as.factor(b)) %>% group_by(b)  %>% mutate(CVaR=rearrangement(list(ps),CVaR,n=1000)) %>% ggplot + aes(x=p,y=CVaR,ymax=CVaR+zz*CVaR.se,ymin=CVaR-zz*CVaR.se,color=b,fill=b) + geom_line() + geom_point() + geom_ribbon(alpha=0.5) + ylab('CVaR') + xlab('alpha')
job_bounded_bounds = rbind(
  CVaRmATE %>% mutate(b='NA', Type='CATE-CVaR'),
  CVaR.bbound.mATE%>%filter(b>0)%>%mutate(Type='Thm. 3.2'),
  foreach(b=bs, .combine=rbind) %do% { CVaRmATE %>% mutate(CVaR = (CVaR-b)*(p<1), b=b, Type='Thm. 3.3') } %>% filter(b>0)
) %>% mutate(Type = factor(Type, levels=c('CATE-CVaR','Thm. 3.2','Thm. 3.3')),
             b = factor(b, levels=c('NA',bs[bs>0]))) %>%
  group_by(b,Type)  %>% mutate(CVaR=rearrangement(list(ps),CVaR,n=1000)) %>% ggplot + aes(x=p,y=CVaR,ymax=CVaR+zz*CVaR.se,ymin=CVaR-zz*CVaR.se,color=b,fill=b,shape=Type) + geom_line() + geom_point() + geom_ribbon(alpha=0.5,color=NA) + ylab(TeX('${CVaR}_{\\alpha}-\\bar{\\tau}$')) + xlab(TeX('$\\alpha$'))
job_bounded_bounds
```



```{r}
CVaR.bbound.mATE %>%
  mutate(b = as.factor(b)) %>%
  
  group_by(b) %>%
  mutate(CVaR = rearrangement(list(ps), CVaR, n = 1000)) %>%
  plot_cvar_groups(
  # data = CVaR.bbound.mATE, 
  x = "p", y = "CVaR", 
  ymax = "CVaR + zz * CVaR.se", ymin = "CVaR - zz * CVaR.se",
  color = "b", fill = "b",
  ylab_text = "CVaR", xlab_text = "alpha"
)
```



```{r}
df_bounded <- 
  job_bounded_bounds <- rbind(
    CVaRmATE %>% mutate(b = "NA", Type = "CATE-CVaR"),
    CVaR.bbound.mATE %>% 
      filter(b > 0) %>% 
      mutate(Type = "Thm. 3.2"),
    
    foreach(b = bs, .combine = rbind) %do%
      {
        CVaRmATE %>% mutate(CVaR = (CVaR - b) * (p < 1), b = b, Type = "Thm. 3.3")
      } %>% filter(b > 0)
  ) %>%
  mutate(
    Type = factor(Type, levels = c("CATE-CVaR", "Thm. 3.2", "Thm. 3.3")),
    b = factor(b, levels = c("NA", bs[bs > 0]))
  ) %>%
  group_by(b, Type) %>%
  mutate(CVaR = rearrangement(list(ps), CVaR, n = 1000)) 


```


```{r}
plot_cvar_groups(
  data = df_bounded, 
  x = "p", y = "CVaR", 
  ymax = "CVaR + zz * CVaR.se", ymin = "CVaR - zz * CVaR.se", 
  color = "b", fill = "b", shape = "Type",
  ylab_text = "${CVaR}_{\\alpha}-\\bar{\\tau}$", xlab_text = "$\\alpha$"
)
```

## Variance-based bounds vs ATE


```{r cache=T}
# Variance-based bounds vs ATE

totvar <- Rsquared %>%
  summarise(sum(condvar)) %>%
  pull()
job_binary <- job_binary %>% 
  mutate(
    sdprod01 = sqrt(var0 * var1), 
    varsum01 = var0 + var1
  )


CVaR.sbound.mATE <- foreach(p = ps, .combine = rbind) %do% {
  foreach(rho = rhos, .combine = rbind) %do% {
    q <- goldsectmax(
      function(beta) {
        (
          job_binary %>% 
            summarise(
              beta + 
                mean(
                  sw * (
                    tau - beta - sqrt((tau - beta)^2 + varsum01 - 2 * rho * sdprod01))
                  ) / (2 * p)
            ) %>% 
            pull()
        )
      },
      min(job_binary$tau) - 5 * totvar / max(p, .01),
      max(job_binary$tau) + 5 * totvar / max(1. - p, .01),
      tol = 1e-4, m = 1e3
    )
    job_binary %>%
      mutate(IF = cvar_if_bbouns_ate(q, p, mu1, mu0, A, ipw, Y, tau, varsum01, rho, sdprod01)) %>%
      summarise(p = p, rho = rho, CVaR = mean(sw * IF, na.rm = T), CVaR.se = sd(sw * IF, na.rm = T) / sqrt(n()))
  }
}
```


```{r cache=T}

dfCVaR.sbound.mATE <- 
  CVaR.sbound.mATE %>%
  mutate(rho = as.factor(rho)) %>%
  filter(p > .25) 

```

```{r}
plot_cvar_groups(
  data = dfCVaR.sbound.mATE, 
  x = "p", y = "CVaR", 
  ymax = "CVaR + zz * CVaR.se", ymin = "CVaR - zz * CVaR.se", 
  color = "rho", fill = "rho",
  ylab_text = "${CVaR}_{\\alpha}(\\tau(X))-\\bar\\tau$", xlab_text = "$\\alpha$"
)
```


```{r cache=T}
job_condvar_bounds <- rbind(
  CVaRmATE %>% mutate(rho = "NA", type = "CATE-CVaR"),
  CVaRmATE %>% mutate(rho = "NA", type = "Eq. (9) bound", CVaR = CVaR - correction1 / (2 * p)),
  CVaRmATE %>% mutate(rho = "NA", type = "Eq. (10) bound", CVaR = CVaR - correction2 / (2 * p)),
  CVaR.sbound.mATE %>% mutate(type = "Thm. 3.4 bound")
) %>%
  mutate(
    Type = 
      factor(
        type, 
        levels = 
          c("CATE-CVaR", "Thm. 3.4 bound", "Eq. (9) bound", "Eq. (10) bound"), 
        labels = c("CATE-CVaR", "Thm. 3.4", "Eq. (9)", "Eq. (10)")
        ),
    Correlation = factor(rho, levels = c("NA", rev(rhos)))
  ) %>%
  group_by(rho, type) %>%
  mutate(CVaR = rearrangement(list(ps), CVaR, n = 1000)) %>%
  filter(p >= .7) 


```

```{r}
plot_cvar_groups(
  data = job_condvar_bounds, 
  x = "p", y = "CVaR", 
  ymax = "CVaR + zz * CVaR.se", ymin = "CVaR - zz * CVaR.se", 
  color = "Correlation", fill = "Correlation", shape = "Type",
  ylab_text = "${CVaR}_{\\alpha}-\\bar{\\tau}$", xlab_text = "$\\alpha$",
  shape_legend_title = "Type", 
  color_legend_title = "$\\rho$", 
  fill_legend_title = "$\\rho$"
)
```


## CVaR treatment effect

```{r}
# CVaR treatment effect
CVaR.TE <- job_binary %>%
  mutate(
    sA = sw * A * ipw * Y,
    sA1 = sw * (1 - A) * ipw * Y
  ) |> 
  summarise(
    mu1 = mean(sA), 
    se1 = sd(sA) / sqrt(n()), 
    mu0 = mean(sA1), 
    se0 = sd(sA1) / sqrt(n())
  ) %>%
  merge(
    x = ., y = tibble(p = ps), all = True
    ) %>%
  mutate(
    p1 = p> 1,
    p_1 = 1 - p,
    se_p = se1 / p,
    cvar1 =    (p1 - mu1) * (mu1 - p_1) / p, 
    cvar1.se = (p1 - mu1) * se_p, 
    cvar0 =    (p1 - mu0) * (mu0 - p_1) / p, 
    cvar0.se = (p1 - mu0) * se_p
  ) %>%
  mutate(
    cvar.te = cvar1 - cvar0, 
    cvar.te.se = sqrt(cvar1.se^2 + cvar0.se^2)
    )

job_cvar_te <- rbind(
  CVaR.TE %>% mutate(cvar = cvar1, cvar.se = cvar1.se, Group = "A=1"),
  CVaR.TE %>% mutate(cvar = cvar0, cvar.se = cvar0.se, Group = "A=0"),
  CVaR.TE %>% mutate(cvar = cvar.te, cvar.se = cvar.te.se, Group = "Diff")
) 


```

```{r}
plot_cvar_groups(
  data = job_cvar_te, 
  x = "p", y = "cvar", 
  ymax = "cvar + zz * cvar.se", ymin = "cvar - zz * cvar.se", 
  color = "Group", fill = "Group",
  ylab_text = "CVaR", xlab_text = "alpha"
)
```